import React, {
  forwardRef,
  useCallback,
  useEffect,
  useImperativeHandle,
  useMemo,
  useRef,
  useState,
} from 'react';
import classNames from 'classnames';
import { find, get, keys, merge, remove, set, toLower, uniq, values } from 'lodash';
import ArtTemplateDataInfo from '../../../../components/ComponentsLibrary/ArtTemplateDataInfo';
import { TzCard, TzCardHeaderState } from '../../../../components/tz-card';
import { TzCheckbox } from '../../../../components/tz-checkbox';
import { MyFormItem, TzForm, TzFormItem, TzFormItemsSubTit } from '../../../../components/tz-form';
import { TzInput } from '../../../../components/tz-input';
import { TzRadio, TzRadioGroup } from '../../../../components/tz-radio';
import { TzSelect } from '../../../../components/tz-select';
import { localLang, translations } from '../../../../translations/translations';
import Form, { FormInstance } from 'antd/lib/form';
import { RenderTag, TzTag } from '../../../../components/tz-tag';
import { TzSwitch } from '../../../../components/tz-switch';
import TzInputSearch from '../../../../components/tz-input-search';
import { initTypes } from '../../../ImageReject/ImageNewStrategy';
import { TzInfoTooltip } from '../../../../components/tz-tooltip';
import { curriedFormItemLabel } from './util';
import { TzButton } from '../../../../components/tz-button';
import AddInfoBtn from '../../../../components/ComponentsLibrary/AddInfoBtn';
import { TzConfirm } from '../../../../components/tz-modal';
import { TzTable } from '../../../../components/tz-table';
import TzPopconfirm from '../../../../components/ComponentsLibrary/TzPopconfirm';
import {
  segmentedOp,
  StrategyAction,
} from '../../../../components/ComponentsLibrary/TzStrategyAction';
import { tabType } from '../../ImagesScannerScreen';
import { useFormErrorInfo } from '../../../../components/tz-form/useFormLib';
import { securityPolicyValidator } from '../SecurityPolicyEdit';
import VulnTableEdit from './VulnTableEdit';
import EllipsisPopover from '../../../../components/ellipsisPopover/ellipsisPopover';
import useLayoutMainSearchWid from '../../../../helpers/useLayoutMainSearchWid';
import { PageTitle } from '../../ImagesCI/CI';

const fieldsLabelMap: any = {
  enable: translations.functionSwitch,
  severity: translations.kubeScan_severity,
  black: translations.custom_risk_vulnerability,
  white: translations.custom_whitelist_vulnerability,
  ignoreUnfixed: translations.ignore_unrepairable_vulnerabilities,
  ignoreLangVuln: translations.ignore_application_vulnerabilities,
};
const curriedLabel = curriedFormItemLabel(fieldsLabelMap);

const severityOpt = initTypes.map((v) => ({
  label:
    v.value === 'UNKNOWN'
      ? v.label
      : localLang === 'zh'
      ? `${v.label}${translations.and_above}`
      : `${translations.and_above}${v.label}`,
  value: v.value,
}));
let Vulncontent = (props: { [x: string]: any; getFormInstance: any }) => {
  let { getFormInstance, ...otherProps } = props;
  let [dataSource] = useState<any[]>(otherProps.pkg || []);
  const [formIns] = Form.useForm();
  let tableEditRef = useRef<any>();
  let type = Form.useWatch('type', formIns);
  useEffect(() => {
    formIns.setFieldsValue(props);
    getFormInstance(() => {
      return new Promise((resolveFunc, rejectFunc) => {
        formIns
          .validateFields()
          .then((val) => {
            if (type === 'all') {
              resolveFunc(set(val, 'pkg', []));
            } else {
              tableEditRef.current?.form
                ? tableEditRef.current?.form
                    .validateFields()
                    .then((res: any) => {
                      resolveFunc(set(val, 'pkg', values(res)));
                    })
                    .catch(rejectFunc)
                : resolveFunc(set(val, 'pkg', []));
            }
          })
          .catch(rejectFunc);
      });
    });
  }, [props]);
  useEffect(() => {
    if (dataSource.length) return;
    tableEditRef.current?.push({
      pkgName: undefined,
      pkgVersion: undefined,
    });
  }, [type, dataSource]);
  return (
    <TzForm form={formIns}>
      <TzFormItem
        name="vulnID"
        label={translations.scanner_detail_container_name}
        rules={[
          {
            required: true,
            message: translations.number_cannot_be_empty,
          },
        ]}
      >
        <TzInput placeholder={translations.imagesDiscover_search_placeholder} />
      </TzFormItem>
      <TzFormItem
        name="type"
        label={translations.imageReject_used_for_obj}
        style={{ marginBottom: 0 }}
        initialValue={'all'}
      >
        <TzRadioGroup>
          <TzRadio value="all">{translations.all_packages}</TzRadio>
          <TzRadio value="notAll">{translations.specify_packages}</TzRadio>
        </TzRadioGroup>
      </TzFormItem>
      <TzFormItem name="pkg" hidden>
        <TzSelect />
      </TzFormItem>
      {type === 'all' ? null : (
        <>
          <VulnTableEdit
            columns={[
              {
                title: translations.scanner_detail_soft_pack,
                dataIndex: 'pkgName',
                width: '40%',
                editable: true,
              },
              {
                title: translations.package_version,
                dataIndex: 'pkgVersion',
                editable: true,
              },
            ]}
            value={dataSource}
            ref={tableEditRef}
          />
          <AddInfoBtn
            className={'mt6'}
            onClick={() => {
              tableEditRef.current?.push({
                pkgName: undefined,
                pkgVersion: undefined,
              });
            }}
          />
        </>
      )}
    </TzForm>
  );
};
export let addVuln = (props: { [x: string]: any; title: string }, callback?: any) => {
  let { title, ...otherData } = props;
  let getData: () => Promise<void>;
  TzConfirm({
    width: 800,
    title: title,
    okText: translations.confirm_modal_sure,
    cancelText: translations.cancel,
    content: (
      <Vulncontent
        {...otherData}
        getFormInstance={(fn: any) => {
          getData = fn;
        }}
      />
    ),
    onOk() {
      return getData().then((res) => {
        callback && callback(res);
      });
    },
  });
};
export let vulnColumns = [
  {
    title: translations.scanner_detail_container_name,
    dataIndex: 'vulnID',
    ellipsis: true,
  },
  {
    title: translations.imageReject_used_for_obj,
    dataIndex: 'pkg',
    width: '50%',
    render: (pkg: any) => {
      return pkg.length ? (
        <p style={{ maxWidth: '100%' }}>
          {pkg?.map((item: any) => {
            return (
              <TzTag className="mt4" style={{ maxWidth: '100%' }}>
                <EllipsisPopover>
                  {item.pkgName}
                  <span style={{ opacity: 0.35 }}>@</span>
                  {item.pkgVersion}
                </EllipsisPopover>
              </TzTag>
            );
          })}
        </p>
      ) : (
        <TzTag>{translations.all_packages}</TzTag>
      );
    },
  },
];
const VulnerabilityRules = (props: any) => {
  let { form, errorFields, title, id, imageFromType, setErrorFields } = props;
  let vulnBlack = Form.useWatch(['vuln', 'black'], form) || [];
  let vulnWhite = Form.useWatch(['vuln', 'white'], form) || [];
  let newColumnsBlack = [
    ...vulnColumns,
    {
      title: translations.operation,
      dataIndex: 'operation',
      width: '120px',
      render: (_: any, record: any, index: number) => {
        return (
          <span>
            <TzButton
              type={'text'}
              onClick={() => {
                addVuln(
                  merge({}, record, {
                    type: record.pkg && record.pkg?.length > 0 ? 'notAll' : 'all',
                  }),
                  (val: any) => {
                    vulnBlack.splice(index, 1, val);
                    form.setFieldValue(['vuln', 'black'], [...vulnBlack]);
                  },
                );
              }}
              style={{ marginRight: 8 }}
            >
              {translations.edit}
            </TzButton>
            <TzPopconfirm
              title={translations.unStandard.str39}
              placement="topLeft"
              cancelButtonProps={{
                type: 'text',
                danger: true,
                size: 'small',
              }}
              okButtonProps={{
                type: 'primary',
                danger: true,
                size: 'small',
              }}
              onConfirm={() => {
                let arr = [...vulnBlack];
                remove(arr, (item: any) => {
                  return item.vulnID === record.vulnID;
                });
                form.setFieldValue(['vuln', 'black'], [...arr]);
              }}
              okText={translations.delete}
              cancelText={translations.cancel}
            >
              <TzButton type={'text'} danger>
                {translations.delete}
              </TzButton>
            </TzPopconfirm>
          </span>
        );
      },
    },
  ];
  let newColumnsWhite = [
    ...vulnColumns,
    {
      title: translations.operation,
      dataIndex: 'operation',
      width: '120px',
      render: (_: any, record: any, index: number) => {
        return (
          <span>
            <TzButton
              type={'text'}
              onClick={() => {
                addVuln(
                  merge({}, record, {
                    type: record.pkg && record.pkg?.length > 0 ? 'notAll' : 'all',
                  }),
                  (val: any) => {
                    vulnWhite.splice(index, 1, val);
                    form.setFieldValue(['vuln', 'white'], [...vulnWhite]);
                  },
                );
              }}
              style={{ marginRight: 8 }}
            >
              {translations.edit}
            </TzButton>
            <TzPopconfirm
              title={translations.unStandard.str39}
              placement="topLeft"
              cancelButtonProps={{
                type: 'text',
                danger: true,
                size: 'small',
              }}
              okButtonProps={{
                type: 'primary',
                danger: true,
                size: 'small',
              }}
              onConfirm={() => {
                let arr = [...vulnWhite];
                remove(arr, (item: any) => {
                  return item.vulnID === record.vulnID;
                });
                form.setFieldValue(['vuln', 'white'], [...arr]);
              }}
              okText={translations.delete}
              cancelText={translations.cancel}
            >
              <TzButton type={'text'} danger>
                {translations.delete}
              </TzButton>
            </TzPopconfirm>
          </span>
        );
      },
    },
  ];
  let { errorInfo } = useFormErrorInfo(errorFields, [
    'vuln.severity',
    'vuln.hasFixedVuln',
    'vuln.black',
  ]);
  return (
    <TzCard
      bodyStyle={{ padding: '0 24px 4px 24px' }}
      className={classNames({ 'has-error': errorInfo })}
      title={title}
      id={id}
    >
      <TzFormItem
        label={curriedLabel('enable')}
        name={['vuln', 'enable']}
        valuePropName="checked"
        initialValue={false}
      >
        <TzSwitch
          checkedChildren={translations.confirm_modal_isopen}
          unCheckedChildren={translations.confirm_modal_isclose}
        />
      </TzFormItem>
      {tabType.deploy === imageFromType && (
        <TzFormItem
          label={translations.imageReject_strategy_action_title}
          name={['vuln', 'action']}
          initialValue={'alarm'}
        >
          <StrategyAction data={segmentedOp} />
        </TzFormItem>
      )}
      <TzFormItemsSubTit errorInfo={errorInfo} />
      <TzFormItem
        label={curriedLabel('severity')}
        name={['vuln', 'severity']}
        dependencies={[
          ['vuln', 'enable'],
          ['vuln', 'hasFixedVuln'],
          ['vuln', 'black'],
        ]}
        className="mb12"
        rules={[
          (formInstance) => ({
            validator: () => securityPolicyValidator(formInstance, setErrorFields, 'vuln'),
          }),
        ]}
      >
        <TzSelect
          style={{ maxWidth: 180 }}
          allowClear
          placeholder={translations.originalWarning_pleaseSelect}
          options={severityOpt}
        />
      </TzFormItem>
      <TzFormItem
        name={['vuln', 'hasFixedVuln']}
        valuePropName="checked"
        className="mb12"
        initialValue={true}
        rules={[
          (formInstance) => ({
            validator: () => securityPolicyValidator(formInstance, setErrorFields, 'vuln'),
          }),
        ]}
        dependencies={[
          ['vuln', 'enable'],
          ['vuln', 'severity'],
          ['vuln', 'black'],
        ]}
      >
        <TzCheckbox>{translations.has_fixes_vuln}</TzCheckbox>
      </TzFormItem>
      <MyFormItem
        label={translations.imageReject_self_leak_name}
        name={['vuln', 'black']}
        rules={[
          (formInstance) => ({
            validator: () => securityPolicyValidator(formInstance, setErrorFields, 'vuln'),
          }),
        ]}
        render={(children) => (
          <>
            {children}
            <AddInfoBtn
              className={'mt6'}
              onClick={() =>
                addVuln(
                  { title: translations.added_custom_blacklist_vulnerability },
                  (val: any) => {
                    form.setFieldValue(['vuln', 'black'], [...vulnBlack, val]);
                  },
                )
              }
            />
          </>
        )}
        initialValue={[]}
        dependencies={[
          ['vuln', 'enable'],
          ['vuln', 'severity'],
          ['vuln', 'hasFixedVuln'],
        ]}
      >
        <TzTable
          dataSource={vulnBlack}
          columns={newColumnsBlack}
          pagination={false}
          locale={{ emptyText: <></> }}
        />
      </MyFormItem>
      <PageTitle
        title={translations.rule_white_list}
        className={'f14 mt16 mb12'}
        style={{ color: '#3e4653' }}
      />
      <TzFormItem
        name={['vuln', 'ignoreUnfixed']}
        valuePropName="checked"
        className="mb12"
        initialValue={true}
      >
        <TzCheckbox>{curriedLabel('ignoreUnfixed')}</TzCheckbox>
      </TzFormItem>
      <TzFormItem
        name={['vuln', 'ignoreLangVuln']}
        valuePropName="checked"
        className="mb12"
        initialValue={true}
      >
        <TzCheckbox>
          {curriedLabel('ignoreLangVuln')}
          <TzInfoTooltip
            className="white-tootip"
            title={translations.unStandard.str87}
            icon={'icon-wenhao'}
          />
        </TzCheckbox>
      </TzFormItem>
      <TzFormItem
        name={['vuln', 'ignoreKernelVuln']}
        valuePropName="checked"
        className="mb12"
        initialValue={true}
      >
        <TzCheckbox>{translations.ignore_vulnerabilities}</TzCheckbox>
      </TzFormItem>
      <MyFormItem
        rules={[]}
        label={translations.imageReject_self_leak_name}
        name={['vuln', 'white']}
        render={(children) => (
          <>
            {children}
            <AddInfoBtn
              className={'mt6'}
              onClick={() =>
                addVuln(
                  { title: translations.added_custom_whitelist_vulnerability },
                  (val: any) => {
                    form.setFieldValue(['vuln', 'white'], [...vulnWhite, val]);
                  },
                )
              }
            />
          </>
        )}
      >
        <TzTable
          dataSource={vulnWhite}
          columns={newColumnsWhite}
          pagination={false}
          locale={{ emptyText: <></> }}
        />
      </MyFormItem>
    </TzCard>
  );
};
export let useVulnDataInfo = (vuln: { [x: string]: any }) => {
  let dataList = useMemo(() => {
    if (!vuln) return [];
    const obj: any = {
      action: translations.imageReject_strategy_action_title + '：',
      severity: `${translations.scanner_detail_severity}：`,
    };
    return keys(obj).map((item) => {
      let o: any = {
        title: obj[item] || '-',
        content: vuln[item],
      };
      if ('action' === item) {
        o['className'] = 'item-flex-center';
        o['render'] = (row: any) => {
          return <RenderTag type={vuln[item]} />;
        };
      }
      if ('severity' === item) {
        o['render'] = () => {
          o['className'] = 'mb12';
          let node = find(initTypes, (ite) => ite.value === vuln[item]);
          let str =
            localLang === 'zh'
              ? `${node?.label}${translations.and_above}`
              : `${translations.and_above}${node?.label}`;
          return node ? str : '-';
        };
      }
      return o;
    });
  }, [vuln]);
  return dataList;
};
export let VulnDetailDom = (props: { data: any; imageFromType: tabType; from?: 'snapshot' }) => {
  let { data: vuln, imageFromType, from } = props;
  if (!vuln) return null;
  const [searchBlack, setSearchBlack] = useState('');
  const [searchWhite, setSearchWhite] = useState('');
  const filterDataBlack = useMemo(() => {
    const sdata = vuln?.black?.filter((item: { [s: string]: unknown } | ArrayLike<unknown>) => {
      return Object.values(item).some((val) => {
        if (typeof val === 'string' || typeof val === 'number') {
          return val.toString().includes(searchBlack);
        }
        return false;
      });
    });
    return sdata;
  }, [vuln, searchBlack]);
  const filterDataWhite = useMemo(() => {
    const sdata = vuln?.white?.filter((item: { [s: string]: unknown } | ArrayLike<unknown>) => {
      return Object.values(item).some((val) => {
        if (typeof val === 'string' || typeof val === 'number') {
          return val.toString().includes(searchWhite);
        }
        return false;
      });
    });
    return sdata;
  }, [vuln, searchWhite]);
  let dataList = useVulnDataInfo(vuln);
  const fitlerWid = useLayoutMainSearchWid({});
  return (
    <>
      {imageFromType === tabType.deploy ? (
        <ArtTemplateDataInfo data={dataList.slice(0, 1)} span={1} rowProps={{ gutter: [0, 0] }} />
      ) : null}
      <TzFormItemsSubTit />
      <ArtTemplateDataInfo data={dataList.slice(1)} span={1} rowProps={{ gutter: [0, 0] }} />
      <TzCheckbox checked={vuln?.hasFixedVuln} disabled className=" mb12">
        {translations.has_fixes_vuln}
      </TzCheckbox>
      <div className={'flex-r-c'}>
        <span style={{ color: '#6C7480' }}>{translations.imageReject_self_leak_name}</span>
        {from === 'snapshot' ? null : (
          <TzInputSearch
            style={{ width: fitlerWid }}
            placeholder={translations.scanner_detail_leak_search_plh}
            onSearch={setSearchBlack}
          />
        )}
      </div>
      <TzTable
        columns={vulnColumns}
        dataSource={filterDataBlack}
        scroll={{ y: 400 }}
        pagination={false}
      />
      <TzFormItemsSubTit title={translations.rule_white_list} className="mt20" />
      <p className="mb12">
        <TzCheckbox disabled checked={vuln.ignoreUnfixed}>
          {curriedLabel('ignoreUnfixed')}
        </TzCheckbox>
      </p>
      <p className="mb12">
        <TzCheckbox disabled checked={vuln.ignoreLangVuln}>
          {curriedLabel('ignoreLangVuln')}
          <TzInfoTooltip
            className="white-tootip"
            title={translations.unStandard.str87}
            icon={'icon-wenhao'}
          />
        </TzCheckbox>{' '}
      </p>
      <p className="mb12">
        <TzCheckbox checked={vuln.ignoreKernelVuln} disabled>
          {translations.ignore_vulnerabilities}
        </TzCheckbox>
      </p>
      <div className={'flex-r-c'}>
        <span style={{ color: '#6C7480' }}>{translations.imageReject_self_leak_name}</span>
        {from === 'snapshot' ? null : (
          <TzInputSearch
            style={{ width: fitlerWid }}
            placeholder={translations.scanner_detail_leak_search_plh}
            onSearch={setSearchWhite}
          />
        )}
      </div>
      <TzTable
        columns={vulnColumns}
        dataSource={filterDataWhite}
        scroll={{ y: 400 }}
        pagination={false}
      />
    </>
  );
};
VulnerabilityRules.Detail = ({ data, id, title, imageFromType }: any) => {
  let vuln = data.vuln;

  return (
    <TzCard
      title={
        <>
          {title}
          <RenderTag type={vuln?.enable + ''} className={'ml10'} />
        </>
      }
      id={id}
      bodyStyle={{ paddingTop: 0 }}
    >
      <VulnDetailDom data={vuln} imageFromType={imageFromType} />
    </TzCard>
  );
};
export default VulnerabilityRules;
